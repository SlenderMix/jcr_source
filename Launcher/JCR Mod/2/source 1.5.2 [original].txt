
Инструкция:

 Вы собираетесь собрать JCR Mod для оригинального клиента Minecraft 1.5.2-.
  1. Посещаете сайт "mcp.ocean-labs.de", ищите и скачиваете "Minecraft Coder Pack" ("MCP") под версию клиента, для которого вы собираете JCR Mod.
     Распаковываете архив в папку.
  3. Идете в папку "mcp/jar/", кладете сюда папки "bin" и "resources" чистого клиента Minecraft.
  4. Запускаете файл "mcp/decompile.bat". Ждете окончания декомпиляции клиента.
  5. Переходите в папку "mcp/scr/minecraft/" и открываете поочередно каждый файл, что дан в списке ниже ("затронутые файлы").
  6. Строки "* * * Название_файла:" (встречаются ниже) означают название файла, которому принадлежит код ниже этого названия до следующей такой строки.
     Этот код нужно вставить в соответствующий этому названию открытый вами файл, следуя микроинструкциям, которые обозначены как "//".
     Вы можете заметить ссылку или несколько ссылок (наподобии: "http://www.er-log.ru/.../"). Можно сразу заменить эту ссылку на свою, в точно таком формате.
  7. После замены кода, запускаете файл "mcp/recompile.bat". Ждете окончание рекомпиляции. Запускаете файл "reobfuscate.bat". Ждете окончание реобфускации.
  8. В папке "mcp/reobf/" будет созданный вами JCR Mod. Открываете файл "Инструкция.txt", данный в архиве с исходным кодом программы, читаете его.

Затронутые файлы:

 (Original)
 1. net/minecraft/src/NetClientHandler.java
 2. net/minecraft/client/Minecraft.java
 3. net/minecraft/client/MinecraftApplet.java
 4. net/minecraft/src/GuiMainMenu.java
 5. net/minecraft/src/Session.java

Исходный код:

* * * NetClientHandler.java:

// Ищем  метод с таким названием и полностью заменяем его тело на то, что дано ниже

    private String sendSessionRequest(String par1Str, String par2Str, String par3Str)
    {
        try
        {
            URL var4 = new URL("http://www.er-log.ru/JCR_Launcher/scripts/jcr_joinserver.php?user=" + urlEncode(par1Str) + "&serverId=" + urlEncode(par3Str) + "&sessionId=" + urlEncode(mc.session.new_sessionId) + "&hash=" + urlEncode(mc.fg_fucn254(mc.appPath())) + "&client=" + urlEncode(mc.getClientFolder()) + "&mac=" + urlEncode(mc.getHWID()) + "&mods=" + mc.fg_fucn255("nomods") + "&action=setServerId");
            BufferedReader var5 = new BufferedReader(new InputStreamReader(var4.openStream()));
            String var6 = var5.readLine();
            var5.close();
            return var6;
        }
        catch (IOException var7)
        {
            return var7.toString();
        }
    }

* * * Minecraft.java:

// Ищем подобные строки тем, что даны ниже и вставляем их после этих строк

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.security.MessageDigest;
import java.security.DigestInputStream;
import java.util.Formatter;
import java.math.BigInteger;

// Вставляете перед методом "public Minecraft(...)"

    private static String clientFolder = null;
	private static String HWID = null;
	private static boolean useMultiplayer = true;

// Вставляете все то, что после символа "{" ниже до символа "}" в начало метода "startGame()"

    public void startGame() throws LWJGLException
    {
        if (session.new_sessionId.split("<::>")[3].equals("null")) useMultiplayer = false; else
        checkLauncher(session.new_sessionId.split("<::>")[2], session.new_sessionId.split("<::>")[3]);
        this.clientFolder = session.new_sessionId.split("<::>")[1];
		this.HWID = session.new_sessionId.split("<::>")[4];
        session.new_sessionId = fg_fucn255(session.sessionId + fg_fucn256(session.sessionId, 3));
    }
    
// Все что ниже, вставляете после метода "startGame() { ... }"

    public static void checkLauncher(String path, String hash)
    {
        if (hash.equalsIgnoreCase(fg_fucn255(fg_fucn254(path)))) return;
        else
        {
            System.err.println("Exit. Error code: 901");
            System.exit(901);
        }
    }
    
    // Возвращает путь до исполняемого файла
    public String appPath()
    {
        try { return getClass().getProtectionDomain().getCodeSource().getLocation().toURI().toString().replace("jar:", "").replace("file:", "").split("!")[0]; }
        catch (Exception e) { e.printStackTrace(); return null; }
    }
	
    // Расчитывает MD5 хеш-сумму файла
    public static String fg_fucn254(String filename)
    {
        FileInputStream fis = null;
        DigestInputStream dis = null;
        BufferedInputStream bis = null;
        Formatter formatter = null;
        try
        {
            MessageDigest messagedigest = MessageDigest.getInstance("MD5");
            fis = new FileInputStream(filename);
            bis = new BufferedInputStream(fis);
            dis = new DigestInputStream(bis, messagedigest);
            while (dis.read() != -1);
            byte abyte0[] = messagedigest.digest();
            formatter = new Formatter();
            byte abyte1[] = abyte0;
            int i = abyte1.length;
            for (int j = 0; j < i; j++)
            {
                byte byte0 = abyte1[j];
                formatter.format("%02x", new Object[] { Byte.valueOf(byte0) });
            }
            return formatter.toString();
        } catch (Exception e)
        {
            return "";
        } finally
        {
            try { fis.close(); } catch (Exception e) {}
            try { dis.close(); } catch (Exception e) {}
            try { bis.close(); } catch (Exception e) {}
            try { formatter.close(); } catch (Exception e) {}
        }
    }

    // Расчитывает MD5 хеш-сумму строки
    public static String fg_fucn255(String s)
    {
        String hash = null;
        try
        {
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.update(s.getBytes(), 0, s.length());
            hash = new BigInteger(1, m.digest()).toString(16);
        } catch (Exception e)
        {
            e.printStackTrace();
        }

        return hash;
    }
	
    // Возвращает [n] последних символов из строки
    private String fg_fucn256(String str, int num)
    {
        return str.substring(str.length() - num, str.length());
    }
	
	public static boolean useMultiplayer()
	{
		return useMultiplayer;
	}
	
	public String getClientFolder()
	{
		return this.clientFolder;
	}
	
	public String getHWID()
	{
		return this.HWID;
	}

* * * MinecraftApplet.java:

// Ищем строку, похожую на "System.out.println("(Session ID is " + this.mc.session.sessionId + ")");" и ставим перед ней двойной слеш ("//")

* * * GuiMainMenu.java:

// Ищите метод "private void addSingleplayerMultiplayerButtons(int par1, int par2, StringTranslate par3StringTranslate)".
// Далее ищите строку, содержащую "menu.multiplayer" и вставляете этот код прямо перед ней: if (Minecraft.useMultiplayer())
// Получится вот так:
	
    private void addSingleplayerMultiplayerButtons(int par1, int par2, StringTranslate par3StringTranslate)
    {
        ...
        if (Minecraft.useMultiplayer()) this.buttonList.add(new GuiButton(2, this.width / 2 - 100, par1 + par2 * 1, par3StringTranslate.translateKey("menu.multiplayer")));
		...
    }

* * * Session.java:

// Вставляете после строки "class Session {"

    public static String new_sessionId;

// Удаляете строку "this.sessionId = " и все, что идет дальше нее в методе "Session(...) { ... }". На это место вставляете все что после символа "{" и до символа "}"

    public Session(String par1Str, String par2Str)
    {
        this.sessionId = par2Str.split("<::>")[0];
        this.new_sessionId = par2Str;
    }
